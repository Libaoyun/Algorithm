/**
 * 最基本的青蛙跳台阶问题，使用动态规划
 * 青蛙跳台阶，可以一次跳一阶，也可以一次跳两阶，求跳n阶台阶一共有多少种方法

 * 动态规划问题就是根据一系列最简单的规律，通过寻找状态转移方程，从而求解问题
 */
public class BasicFrogDPQst {

    public static void main(String[] args) {
        int n = 5;
        int result = FrogJump(n);
        System.out.println("青蛙跳" + n + "阶台阶一共有" + result + "种方法");
    }

    // 动态规划方法
    public static int FrogJump(int n) {
        if (n <= 0) {
            return 0;
        }
        if (n == 1) {
            return 1;
        }
        if (n == 2) {
            return 2;
        }
        int[] dp = new int[n + 1];
        dp[1] = 1;
        dp[2] = 2;

        for (int i = 3; i <= n; i++){
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        return dp[n];
    }
    /**
     * eg：比如要跳第五级台阶，那就可以考虑
     * 跳第四级台阶的方法 + 跳第三级台阶的方法，这都是上一步到这一步可选的方式
     * 因为第四级台阶可以一步跳到第五级台阶，也可以两步跳到第五级台阶
     * 所以跳到第五级台阶的方法总数就是跳到第四级台阶的方法总数 + 跳到第三级台阶的方法总数
     * dp3 = 3, dp4 = 3+2=5, dp5 = 5+3=8
     * 比如到第五级，要么从第四级台阶跳一步到第五级台阶，要么从第三级台阶跳两步到第五级台阶
     * 而每一级的方法数又都不一样，比如第五级可以是1 1 1 2也可以是1 1 1 1 1，虽然说前三个步骤都一样，但是后续步骤不一样
     * 因此是相加得来的，因为起点不一样，而只要步骤有一步不一样那结果就不一样了。
     */
}
